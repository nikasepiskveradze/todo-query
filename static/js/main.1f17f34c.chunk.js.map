{"version":3,"sources":["constants/queries.js","services/postsService.js","queries/posts/usePosts.js","queries/posts/useDeletePost.js","components/spinner/Spinner.js","screens/posts/Posts.js","queries/posts/usePost.js","screens/post/Post.js","queries/posts/useCreatePost.js","queries/posts/useUpdatePost.js","screens/newPost/useNewPostForm.js","screens/newPost/NewPost.js","App.js","utils/QueryClient.js","index.js"],"names":["POSTS","fetchPosts","axios","get","then","response","data","createPost","post","updatePost","put","id","deletePost","postId","delete","usePosts","useQuery","queries","postsService","useDeletePost","queryClient","useQueryClient","useMutation","onSuccess","a","previousPosts","getQueryData","nextPosts","filter","item","setQueryData","Spinner","props","className","role","Posts","history","useHistory","postsQuery","isLoading","to","map","title","body","onClick","push","mutate","usePost","enabled","initialData","find","Post","useParams","postQuery","Number","goBack","useCreatePost","posts","invalidateQueries","useUpdatePost","initialValues","useNewPostForm","useFormik","enableReinitialize","onSubmit","values","NewPost","handleChange","handleSubmit","htmlFor","type","name","value","onChange","App","path","component","exact","QueryClient","defaultOptions","refetchOnWindowFocus","ReactDOM","render","QueryClientProvider","client","document","getElementById"],"mappings":"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","file":"static/js/main.1f17f34c.chunk.js","sourcesContent":["export const POSTS = \"posts\";\r\n","import axios from \"axios\";\r\n\r\nexport const fetchPosts = () => {\r\n  return axios\r\n    .get(`https://jsonplaceholder.typicode.com/posts`)\r\n    .then((response) => response.data);\r\n};\r\n\r\nexport const fetchPost = (postId) => {\r\n  return axios\r\n    .get(`https://jsonplaceholder.typicode.com/posts/${postId}`)\r\n    .then((response) => response.data);\r\n};\r\n\r\nexport const createPost = (post) => {\r\n  return axios\r\n    .post(`https://jsonplaceholder.typicode.com/posts`, post)\r\n    .then((response) => response.data);\r\n};\r\n\r\nexport const updatePost = (post) => {\r\n  return axios\r\n    .put(`https://jsonplaceholder.typicode.com/posts/${post.id}`, post)\r\n    .then((response) => response.data);\r\n};\r\n\r\nexport const deletePost = (postId) => {\r\n  return axios\r\n    .delete(`https://jsonplaceholder.typicode.com/posts/${postId}`)\r\n    .then((response) => response.data);\r\n};\r\n","import { useQuery } from \"react-query\";\r\nimport * as queries from \"../../constants/queries\";\r\nimport * as postsService from \"../../services/postsService\";\r\n\r\nconst usePosts = () => {\r\n  return useQuery(queries.POSTS, postsService.fetchPosts);\r\n};\r\n\r\nexport default usePosts;\r\n","import { useMutation, useQueryClient } from \"react-query\";\r\nimport * as postsService from \"../../services/postsService\";\r\nimport * as queries from \"../../constants/queries\";\r\n\r\n// გაშლილად მიწერია ახლა onSuccess ში ლოგიკები, თორე ისე უფრო მარტივადაც შეიძლება დაწერა\r\n\r\nconst useDeletePost = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation(postsService.deletePost, {\r\n    onSuccess: async (post, postId) => {\r\n      const previousPosts = queryClient.getQueryData(queries.POSTS);\r\n\r\n      const nextPosts = previousPosts.filter((item) => item.id !== postId);\r\n\r\n      queryClient.setQueryData(queries.POSTS, nextPosts);\r\n      // await queryClient.invalidateQueries(queries.POSTS);\r\n    },\r\n  });\r\n};\r\n\r\nexport default useDeletePost;\r\n","import React from \"react\";\r\n\r\nconst Spinner = (props) => {\r\n  return (\r\n    <div className=\"w-100 h-100 justify-content-center d-flex align-items-center mt-3\">\r\n      <div className=\"spinner-border text-primary\" role=\"status\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport usePosts from \"../../queries/posts/usePosts\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport useDeletePost from \"../../queries/posts/useDeletePost\";\r\nimport Spinner from \"../../components/spinner/Spinner\";\r\n\r\nconst Posts = (props) => {\r\n  const history = useHistory();\r\n  const postsQuery = usePosts();\r\n  const deletePost = useDeletePost();\r\n\r\n  if (postsQuery.isLoading) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Link to=\"/new-post\" className=\"btn btn-success ml-3 mb-3 mt-3\">\r\n        New post\r\n      </Link>\r\n      <div className=\"mx-auto row row-cols-1 row-cols-md-3 g-4\">\r\n        {postsQuery.data.map((post) => (\r\n          <div className=\"col mb-4\" key={post.id}>\r\n            <div className=\"card\">\r\n              <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{post.title}</h5>\r\n                <p className=\"card-text\">{post.body}</p>\r\n              </div>\r\n\r\n              <button\r\n                className=\"btn btn-primary mb-3\"\r\n                onClick={() => history.push(`/${post.id}`)}\r\n              >\r\n                Go to Full page\r\n              </button>\r\n\r\n              <button\r\n                className=\"btn btn-success mb-3\"\r\n                onClick={() => history.push(`/edit-post/${post.id}`)}\r\n              >\r\n                Edit\r\n              </button>\r\n\r\n              <button\r\n                onClick={() => deletePost.mutate(post.id)}\r\n                className=\"btn btn-danger\"\r\n              >\r\n                Delete\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n","import { useQuery, useQueryClient } from \"react-query\";\r\nimport * as queries from \"../../constants/queries\";\r\nimport * as postsService from \"../../services/postsService\";\r\n\r\n// Option: initialData, ეს ოფშენი იმისთვისაა, რო თუ უკვე ჩამოფეჩილი პოსტებიდან თუ კონკრეტული პოსტის რაღაც ნაწილი ჩამოფეჩილია\r\n// მაგიტომაცაა, რომ \"/\" ების გვერდიდან გამოსვლისას Loading არ ჩანს, ქეშიდან იღებს ინიციალიზაციისთვის, თუმცა რესპონსი რო დაბრუნდება შეცვლის ორიგინალი დატითს\r\n// ეს ძაან თესლი ფიჩერია იმენა\r\n\r\n// Enable ოფშენი იმისთვისა რო ავტომატურად არ გაიგზავნოს ქოლი მანამ postId თრუ არ იქნება\r\n// ახალი პოსტის შექმნის screenზე ყოველთვის false იქნება, ამიტომ ქოლი არ გაიგზავნება\r\n// editing ის დროს postId გვექნება და გაიგზავნება ქოლი რო ინფუთებში ავსახოთ\r\n// თუმცა აქაც იგივე პრინციპი მუშაობს, ინფუთებში ჯერ ინიციალიზებული დატა ჩაისმევა თუკი არსებობს\r\n\r\nconst usePost = (postId) => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useQuery(\r\n    [queries.POSTS, postId],\r\n    () => postsService.fetchPost(postId),\r\n    {\r\n      enabled: !!postId,\r\n\r\n      initialData: () => {\r\n        return queryClient\r\n          .getQueryData(queries.POSTS)\r\n          ?.find((post) => post.id === postId);\r\n      },\r\n    }\r\n  );\r\n};\r\n\r\nexport default usePost;\r\n","import React from \"react\";\r\nimport usePost from \"../../queries/posts/usePost\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport Spinner from \"../../components/spinner/Spinner\";\r\n\r\nconst Post = (props) => {\r\n  const { postId } = useParams();\r\n  const history = useHistory();\r\n  const postQuery = usePost(Number(postId));\r\n\r\n  if (postQuery.isLoading) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-3 w-50\">\r\n      <h1>{postQuery.data.title}</h1>\r\n      <div>{postQuery.data.body}</div>\r\n\r\n      <button className=\"mt-3 btn btn-primary\" onClick={() => history.goBack()}>\r\n        Back\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import { useMutation, useQueryClient } from \"react-query\";\r\nimport * as postsService from \"../../services/postsService\";\r\nimport * as queries from \"../../constants/queries\";\r\n\r\n// მუტაციის დროს 4 სხვადასხვა მომენტი გვაქვს, 4ვეს გამოყენება არაა სავალდებულო,\r\n// onSuccess ის დროს რეალურად უკვე რესპონსი ბრუნდება და მაგ დროს შეგვიძლია შეცვალოთ რეალური დატა\r\n\r\n// თუ Optimistic update გავკეთებ ეს კოდი უფრო მარტივდება, რაღაც დოზით\r\n\r\n// onSuccess ში ჩავამატეთ რესპონსიდან დაბრუნებული დატა, მასივში\r\n\r\nconst useCreatePost = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation(postsService.createPost, {\r\n    onSuccess: async (post) => {\r\n      if (queryClient.getQueryData(queries.POSTS)) {\r\n        return queryClient.setQueryData(queries.POSTS, (posts) => [\r\n          post,\r\n          ...posts,\r\n        ]);\r\n      } else {\r\n        await queryClient.invalidateQueries(queries.POSTS);\r\n      }\r\n    },\r\n  });\r\n};\r\n\r\nexport default useCreatePost;\r\n","import { useMutation, useQueryClient } from \"react-query\";\r\nimport * as postsService from \"../../services/postsService\";\r\nimport * as queries from \"../../constants/queries\";\r\n\r\n// შეგვიძლია როგორც კონკრეტულ ობიქტში ჩაწერა ასევე, საერთო მასივში ახალი ელემენტით ჩანაცვლება\r\n\r\nconst useUpdatePost = () => {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation(postsService.updatePost, {\r\n    onSuccess: async (post) => {\r\n      queryClient.setQueryData([queries.POSTS, post.id], post);\r\n\r\n      if (queryClient.getQueryData(queries.POSTS)) {\r\n        queryClient.setQueryData(queries.POSTS, (posts) =>\r\n          posts.map((item) => (item.id === post.id ? post : item))\r\n        );\r\n      } else {\r\n        await queryClient.invalidateQueries(queries.POSTS);\r\n      }\r\n    },\r\n  });\r\n};\r\n\r\nexport default useUpdatePost;\r\n","import { useFormik } from \"formik\";\r\nimport useCreatePost from \"../../queries/posts/useCreatePost\";\r\nimport useUpdatePost from \"../../queries/posts/useUpdatePost\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\n\r\nconst initialValues = {\r\n  title: \"\",\r\n  body: \"\",\r\n};\r\n\r\nconst useNewPostForm = (postQuery) => {\r\n  const { postId } = useParams();\r\n  const history = useHistory();\r\n\r\n  const createPost = useCreatePost();\r\n  const updatePost = useUpdatePost();\r\n\r\n  if (postQuery.data) {\r\n    initialValues.title = postQuery.data.title;\r\n    initialValues.body = postQuery.data.body;\r\n  }\r\n\r\n  return useFormik({\r\n    enableReinitialize: true,\r\n\r\n    initialValues: initialValues,\r\n\r\n    onSubmit: (values) => {\r\n      if (!Number(postId)) {\r\n        createPost.mutate(values);\r\n      } else {\r\n        updatePost.mutate({ id: postId, ...values });\r\n      }\r\n\r\n      history.push(\"/\");\r\n    },\r\n  });\r\n};\r\n\r\nexport default useNewPostForm;\r\n","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport usePost from \"../../queries/posts/usePost\";\r\nimport useNewPostForm from \"./useNewPostForm\";\r\nimport Spinner from \"../../components/spinner/Spinner\";\r\n\r\nconst NewPost = (props) => {\r\n  const { postId } = useParams();\r\n  const postQuery = usePost(Number(postId));\r\n  const { values, handleChange, handleSubmit } = useNewPostForm(postQuery);\r\n\r\n  if (postQuery.isLoading) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-3 w-50 p-3 card\">\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"title\" className=\"form-label\">\r\n            Title\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"title\"\r\n            name=\"title\"\r\n            value={values.title}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"body\" className=\"form-label\">\r\n            Body\r\n          </label>\r\n          <input\r\n            type=\"body\"\r\n            className=\"form-control\"\r\n            id=\"body\"\r\n            name=\"body\"\r\n            value={values.body}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewPost;\r\n","import { Switch, Route } from \"react-router-dom\";\r\nimport Posts from \"./screens/posts/Posts\";\r\nimport Post from \"./screens/post/Post\";\r\nimport NewPost from \"./screens/newPost/NewPost\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/new-post\" component={NewPost} exact />\r\n      <Route path=\"/edit-post/:postId\" component={NewPost} exact />\r\n      <Route path=\"/:postId\" component={Post} exact />\r\n      <Route path=\"/\" component={Posts} exact />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { QueryClient } from \"react-query\";\r\n\r\nconst queryClient = new QueryClient({\r\n  defaultOptions: {\r\n    queries: {\r\n      refetchOnWindowFocus: false,\r\n    },\r\n  },\r\n});\r\n\r\nexport default queryClient;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { QueryClientProvider } from \"react-query\";\r\nimport queryClient from \"./utils/QueryClient\";\r\nimport { ReactQueryDevtools } from \"react-query/devtools\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <QueryClientProvider client={queryClient}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n    <ReactQueryDevtools />\r\n  </QueryClientProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}